modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype OurScenarios uses MDAScenarios('mdaScenarios.de.uni-augsburg');

transformation Import(in input : UML, out output : OurScenarios);

main(){
	var content := object OurScenarios::Content
	{
		name:=input.objectsOfType(UML::Model).name->any(true);
	};
	content.states := input.objectsOfType(UML::StateInvariant)->copyStateInvariant();
	log("Copied States");
	log(input.objectsOfType(UML::Message).signature->size().toString());
	content.operations += input.objectsOfType(UML::Message).signature->oclAsType(UML::NamedElement).map transformMessage();
	log("Tranfsormed Messages");
	
	content.participants += input.objectsOfType(UML::Lifeline).represents.type.map transformParticipant();
	log("Tranfsormed Participants");
	
	content.scenarios += input.objectsOfType(UML::Interaction).map transformScenario();
	log("Transformed Scenarios");

	log("Done");
}

helper Collection(StateInvariant)::copyStateInvariant():OrderedSet(OurScenarios::State){
	var retList := object OrderedSet(OurScenarios::State){
		
	};
	self->forEach(element){
		if (retList->select ( state | state.name = element.invariant.name)->isEmpty()){
			retList += object OurScenarios::State{
				name := element.invariant.name;
			}
		}endif;
	};
	log("reduced to "+ retList->size().toString() +" states");
	return retList;
}

mapping NamedElement::transformMessage():OurScenarios::Operation
	disjuncts Operation::transformMessage,
			Signal::transformMessage;

mapping UML::Operation::transformMessage():OurScenarios::Operation{
	log("Mapped Operation:"+ self.name);
	name:=self.name;
}

mapping UML::Signal::transformMessage():OurScenarios::Operation{
	log("Mapped Signal:" +self.name);
	name:=self.name;
}

mapping Type::transformParticipant():OurScenarios::Participant{
	name:=self.name;
}

mapping Interaction::transformScenario():OurScenarios::ScenarioTable{
	name:=self.name;
}
	