modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype OurScenarios uses MDAScenarios('mdaScenarios.de.uni-augsburg');

transformation SequenceDiagramToScenario(in input : UML, out output : OurScenarios);

main(){
	var content := object OurScenarios::Content
	{
		name:=input.objectsOfType(UML::Model).name->any(true);
	};
	content.states := input.objectsOfType(UML::StateInvariant)->copyStateInvariant();

	content.operations += input.objectsOfType(UML::Message).signature->oclAsType(UML::NamedElement).map transformMessage();
	
	content.participants += input.objectsOfType(UML::Lifeline).represents.type.map transformParticipant();
	
	content.scenarios += input.objectsOfType(UML::Interaction).map transformScenario(content);
}

helper Collection(StateInvariant)::copyStateInvariant():OrderedSet(OurScenarios::State){
	var retList := object OrderedSet(OurScenarios::State){
		
	};
	self->forEach(element){
		if (retList->select ( state | state.name = element.invariant.name)->isEmpty()){
			retList += object OurScenarios::State{
				name := element.invariant.name;
			}
		}endif;
	};
	return retList;
}

mapping NamedElement::transformMessage():OurScenarios::Operation
	disjuncts Operation::transformMessage,
			Signal::transformMessage;

mapping UML::Operation::transformMessage():OurScenarios::Operation{
	name:=self.name;
}

mapping UML::Signal::transformMessage():OurScenarios::Operation{
	name:=self.name;
}

mapping Type::transformParticipant():OurScenarios::Participant{
	name:=self.name;
}

mapping Interaction::transformScenario(in c: OurScenarios::Content):OurScenarios::ScenarioTable{
	name:=self.name;
	records += self.fragment.map transformFragment(c);
}

mapping InteractionFragment::transformFragment(in c : OurScenarios::Content):OurScenarios::ScenarioRecord
	disjuncts MessageOccurrenceSpecification::transformFragment;
	
mapping MessageOccurrenceSpecification::transformFragment(in c : OurScenarios::Content):OurScenarios::ScenarioRecord
	when {
	//Precondition. We only need to take this OccuranceSpec if it is a ReceiveEvent!
		self.message.receiveEvent = self and self.message.messageSort = MessageSort::synchCall;
	}{
		//we have one receiveEvent here. First get the sender and receiver
		receiver := self.oclAsType(OccurrenceSpecification).covered.represents.type.resolveone(OurScenarios::Participant);//c.participants->select(p | p.name = self.covered.represents->any(true).type.name)->first();
		sender := self.message.sendEvent.oclAsType(OccurrenceSpecification).covered.represents.type.resolveone(OurScenarios::Participant);//c.participants->select(p | p.name = self.message.sendEvent.oclAsType(UML::MessageOccurrenceSpecification).covered.represents->any(true).type.name)->first();
		operation := self.message.signature.resolveone(OurScenarios::Operation);//c.operations->select(o | o.name = self.message.signature.name)->first();
		returnValue := object OurScenarios::Value{
			value := self.getReturnValue(sender);
		};
		
		var fragmentList := self.covered->any(true).interaction.fragment;
		var before = true;
		var thePreState : OurScenarios::State;
		var thePostState : OurScenarios::State;
		fragmentList->forEach(element){
			//We go through every interactionfragment and buffer the prestate until we found the self element
			//The next state is the postState
			if (element.oclIsTypeOf(UML::StateInvariant)){
				var elementState := element.oclAsType(UML::StateInvariant);
				//It must be our Lifeline!
				if (elementState.covered = self.covered){
					if (before){
						thePreState := c.getState(element.oclAsType(UML::StateInvariant));
					}else{
						thePostState := c.getState(element.oclAsType(UML::StateInvariant));
						break;
					}
				}
			}else if (element.oclIsTypeOf(UML::MessageOccurrenceSpecification)){
				if (element = self){
					before := false;
				}
			};
		};
		preState := thePreState;
		postState := thePostState;
}

helper Content::getState(in inv : StateInvariant):OurScenarios::State{
	return self.states->select(state|state.name = inv.invariant.name)->any(true);
}

helper MessageOccurrenceSpecification::getReturnValue(in invoker:Participant):String{
	var foundSelf := false;
	var lifeline := self.covered->any(true);
	lifeline.interaction.fragment->forEach(fragment){
		//only check MsgOccSpec if it is covered by the same Lifeline
		if(fragment.oclIsTypeOf(MessageOccurrenceSpecification) and fragment.covered->exists(l|l=lifeline)){
			if(fragment = self){
				foundSelf := true;
			}
			//if the current MsgOccSpec was found already -> check the next outgoing MsgOccSpec
			else if(foundSelf and fragment.oclAsType(MessageOccurrenceSpecification).isSendingToParticipant(invoker)){
				var message := fragment.oclAsType(MessageOccurrenceSpecification).message;
				//if it is a replay message, we found the return value
				if(message.messageSort = MessageSort::reply){
					return message.name;
				}else {
				//the next msg sent to invoker was no reply, so return value must be void
					return "Void";
				}endif;
			}endif;
		}endif;
	};
	return "Void";
}

helper MessageOccurrenceSpecification::isSendingToParticipant(in participant:Participant):Boolean{
	return self.message.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->any(true).represents.type.resolveone(Participant) = participant;
}

//Deprecated and not used...
helper Set(InteractionFragment)::getObectByIndex(in index: Integer):InteractionFragment{
	var act := 0;
	self->forEach(element){
		if (act=index){
			return element;
		}endif;
		act := act +1;
	};
	return null;
}


//Also deprecated!
//This method just builds up a dictionary of Index and States for defined Lifelines
//each participant has one Dictionary. This means, it fills up a 2D-Dict
//Lifeline -> GlobalIndex -> State
helper StateInvariant::buildStateDict(){
	//If build. Iterate through the keys per lifeline and search after the biggest a smaller b and the smallest c greater b
	//b is the MessageOccurance. a < b < c is then the optimum for a = preState and b = postState
	//Maybe not needed...
}
